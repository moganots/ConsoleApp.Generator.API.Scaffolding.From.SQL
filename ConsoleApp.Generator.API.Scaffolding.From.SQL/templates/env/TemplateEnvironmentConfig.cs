using ConsoleApp.Generator.API.Scaffolding.From.SQL.utils.io;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp.Generator.API.Scaffolding.From.SQL.templates.env
{
    public class TemplateEnvironmentConfig
    {
        public TemplateEnvironmentConfig() { }

        public TemplateEnvironmentConfig GenerateDefaultConfig(string path, string applicationName, string companyName, string apiPort, string? replaceString)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Environment Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine($"APP_COMPANY_NAME='{companyName}'");
            sb.AppendLine($"APP_NAME='{applicationName}'");
            sb.AppendLine("APP_COUNTRY_CODE=ZMB");
            sb.AppendLine("APP_ENV=LOCAL");
            sb.AppendLine("NODE_ENV=LOCAL");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_CONTEXT=POSTGRES");
            sb.AppendLine("DB_HOST=localhost");
            sb.AppendLine("DB_AUTH_UID=fl360.admin");
            sb.AppendLine("DB_AUTH_PWD='Hz7#h.W&`PJVjT/P'");
            sb.AppendLine("DB_NAME=fl360.db");
            sb.AppendLine("DB_SCHEMA_NAME=zmb");
            sb.AppendLine("DB_OPTIONS_USE_SSL=false");
            sb.AppendLine("DB_OPTIONS_ENCRYPT=true");
            sb.AppendLine("DB_OPTIONS_POOL_MAX_SIZE=20 # The maximum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_MIN_SIZE=0 # The minimum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_IDLE_MS=1000 # Maximum idle time for the connection pool");
            sb.AppendLine("DB_OPTIONS_POOL_MAX_USES=7500 # Close (and replace) a connection after it has been used x times");
            sb.AppendLine("DB_OPTIONS_CONNECTION_RETRY_INTERVAL_MS=1000 # Re(Connection) retry attempt interval in milliseconds");
            sb.AppendLine("DB_OPTIONS_CONNECTION_TIMEOUT_MS=120000# Close (timeout) connection after x milliseconds");
            sb.AppendLine("DB_OPTIONS_CANCEL_TIMEOUT_MS=1000 # Cancel connection timeout after x milliseconds");
            sb.AppendLine("DB_OPTIONS_SOCKET_TIMEOUT_MS=45000 # Close sockets after x milliseconds of inactivity");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MSSQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_AUTH_TYPE=default");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_INSTANCE_NAME=MSSQLSERVER");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_DB_PORT=1433");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_TRUST_SERVER_CERTIFICATE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_ROW_COLLECTION_ON_DONE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_USE_COLUMN_NAMES=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - POSTGRESQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_POSTGRES_DB_PROTOCOL=postgres");
            sb.AppendLine("DB_POSTGRES_DB_PORT=5432");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_SYNCHRONIZE=true");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_ACQUIRE=120000");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MONGODB Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MONGO_DB_PROTOCOL=mongodb");
            sb.AppendLine("DB_MONGO_DB_PORT=27017");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_AUTO_INDEX=false # Don't build indexes");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_KEEP_ALIVE=true # Keep the connection alive");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_NEW_URL_PARSER=true # Allow users to fall back to the old parser if they find a bug in the new parser");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_SERVER_SELECTION_TIMEOUT_MS=5000 # Keep trying to send operations for 5 seconds");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_FAMILY=4 # Use IPv4, skip trying IPv6");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_UNIFIED_TOPOLOGY=true # Remove support for several connection options that are no longer relevant with the new topology engine");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_FIND_AND_MODIFY=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Authentication Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("AUTH_LOGIN_RETRY_LIMIT=5");
            sb.AppendLine("AUTH_USE_CHECK_IF_USER_LOGGED_IN=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## JWT Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("JWT_SECRET='RmFybWVycyAzNjDCsCBMaW5rIChGTDM2MCkgLyBFVEcgLyBNaXRzdWkgLyB4XD9Iay0yXyhRNyZaXzhhIA=='");
            sb.AppendLine("JWT_SALT_COUNT=22");
            sb.AppendLine("JWT_EXPIRES_IN=2d");
            sb.AppendLine("JWT_IGNORE_EXPIRATION=true");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## API Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("API_PROTOCOL=http");
            sb.AppendLine("API_HOST=localhost");
            sb.AppendLine($"API_PORT={apiPort}");
            sb.AppendLine($"API_BASE_URL=api");
            sb.AppendLine($"API_RELATIVE_PATH={applicationName.Replace(replaceString!, string.Empty)}");
            sb.AppendLine("API_HEADERS_TIMEOUT_MS=120000");
            sb.AppendLine("API_KEEP_ALIVE_TIMEOUT_MS=120000");
            sb.AppendLine("API_TIMEOUT_MS=120000");
            sb.AppendLine("API_BODY_PARSER_LIMIT=100000000");
            sb.AppendLine("API_BODY_PARSER_PARAMETER_LIMIT=100000");
            sb.AppendLine("API_BODY_PARSER_EXTENDED=true");
            new FileIO(path).Replace(sb.ToString());
            return this;
        }
        public TemplateEnvironmentConfig GenerateDevConfig(string path, string applicationName, string companyName, string apiPort, string? replaceString)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Environment Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine($"APP_COMPANY_NAME='{companyName}'");
            sb.AppendLine($"APP_NAME='{applicationName}'");
            sb.AppendLine("APP_COUNTRY_CODE=ZMB");
            sb.AppendLine("APP_ENV=DEV");
            sb.AppendLine("NODE_ENV=DEV");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_CONTEXT=POSTGRES");
            sb.AppendLine("DB_HOST=fl360-jhb-db-fa-dev.cr7xgu4b6jqi.af-south-1.rds.amazonaws.com");
            sb.AppendLine("DB_AUTH_UID=fl360.admin");
            sb.AppendLine("DB_AUTH_PWD='Hz7#h.W&`PJVjT/P'");
            sb.AppendLine("DB_NAME=fl360.db");
            sb.AppendLine("DB_SCHEMA_NAME=zmb");
            sb.AppendLine("DB_OPTIONS_USE_SSL=false");
            sb.AppendLine("DB_OPTIONS_ENCRYPT=true");
            sb.AppendLine("DB_OPTIONS_POOL_MAX_SIZE=20 # The maximum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_MIN_SIZE=0 # The minimum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_IDLE_MS=1000 # Maximum idle time for the connection pool");
            sb.AppendLine("DB_OPTIONS_CONNECTION_RETRY_INTERVAL_MS=1000 # Re(Connection) retry attempt interval in milliseconds");
            sb.AppendLine("DB_OPTIONS_CONNECTION_TIMEOUT_MS=120000# Close (timeout) connection after x milliseconds");
            sb.AppendLine("DB_OPTIONS_CANCEL_TIMEOUT_MS=1000 # Cancel connection timeout after x milliseconds");
            sb.AppendLine("DB_OPTIONS_SOCKET_TIMEOUT_MS=45000 # Close sockets after x milliseconds of inactivity");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MSSQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_AUTH_TYPE=default");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_INSTANCE_NAME=MSSQLSERVER");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_DB_PORT=1433");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_TRUST_SERVER_CERTIFICATE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_ROW_COLLECTION_ON_DONE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_USE_COLUMN_NAMES=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - POSTGRESQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_POSTGRES_DB_PROTOCOL=postgres");
            sb.AppendLine("DB_POSTGRES_DB_PORT=5432");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_SYNCHRONIZE=true");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_ACQUIRE=120000");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_IDLE=120000");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MONGODB Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MONGO_DB_PROTOCOL=mongodb");
            sb.AppendLine("DB_MONGO_DB_PORT=27017");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_AUTO_INDEX=false # Don't build indexes");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_KEEP_ALIVE=true # Keep the connection alive");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_NEW_URL_PARSER=true # Allow users to fall back to the old parser if they find a bug in the new parser");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_SERVER_SELECTION_TIMEOUT_MS=5000 # Keep trying to send operations for 5 seconds");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_FAMILY=4 # Use IPv4, skip trying IPv6");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_UNIFIED_TOPOLOGY=true # Remove support for several connection options that are no longer relevant with the new topology engine");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_FIND_AND_MODIFY=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Authentication Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("AUTH_LOGIN_RETRY_LIMIT=5");
            sb.AppendLine("AUTH_USE_CHECK_IF_USER_LOGGED_IN=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## JWT Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("JWT_SECRET='RmFybWVycyAzNjDCsCBMaW5rIChGTDM2MCkgLyBFVEcgLyBNaXRzdWkgLyB4XD9Iay0yXyhRNyZaXzhhIA=='");
            sb.AppendLine("JWT_SALT_COUNT=22");
            sb.AppendLine("JWT_EXPIRES_IN=2d");
            sb.AppendLine("JWT_IGNORE_EXPIRATION=true");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## API Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("API_PROTOCOL=http");
            sb.AppendLine("API_HOST=localhost");
            sb.AppendLine($"API_PORT={apiPort}");
            sb.AppendLine($"API_BASE_URL=api");
            sb.AppendLine($"API_RELATIVE_PATH={applicationName.Replace(replaceString!, string.Empty)}");
            sb.AppendLine("API_HEADERS_TIMEOUT_MS=120000");
            sb.AppendLine("API_KEEP_ALIVE_TIMEOUT_MS=120000");
            sb.AppendLine("API_TIMEOUT_MS=120000");
            sb.AppendLine("API_BODY_PARSER_LIMIT=100000000");
            sb.AppendLine("API_BODY_PARSER_PARAMETER_LIMIT=100000");
            sb.AppendLine("API_BODY_PARSER_EXTENDED=true");
            new FileIO(path).Replace(sb.ToString());
            return this;
        }
        public TemplateEnvironmentConfig GenerateStagingConfig(string path, string applicationName, string companyName, string apiPort, string? replaceString)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Environment Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine($"APP_COMPANY_NAME='{companyName}'");
            sb.AppendLine($"APP_NAME='{applicationName}'");
            sb.AppendLine("APP_COUNTRY_CODE=ZMB");
            sb.AppendLine("APP_ENV=STG");
            sb.AppendLine("NODE_ENV=STG");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_CONTEXT=POSTGRES");
            sb.AppendLine("DB_HOST=localhost");
            sb.AppendLine("DB_AUTH_UID=fl360.admin");
            sb.AppendLine("DB_AUTH_PWD='Hz7#h.W&`PJVjT/P'");
            sb.AppendLine("DB_NAME=fl360.db");
            sb.AppendLine("DB_SCHEMA_NAME=zmb");
            sb.AppendLine("DB_OPTIONS_USE_SSL=false");
            sb.AppendLine("DB_OPTIONS_ENCRYPT=true");
            sb.AppendLine("DB_OPTIONS_POOL_MAX_SIZE=20 # The maximum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_MIN_SIZE=0 # The minimum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_IDLE_MS=1000 # Maximum idle time for the connection pool");
            sb.AppendLine("DB_OPTIONS_CONNECTION_RETRY_INTERVAL_MS=1000 # Re(Connection) retry attempt interval in milliseconds");
            sb.AppendLine("DB_OPTIONS_CONNECTION_TIMEOUT_MS=120000# Close (timeout) connection after x milliseconds");
            sb.AppendLine("DB_OPTIONS_CANCEL_TIMEOUT_MS=1000 # Cancel connection timeout after x milliseconds");
            sb.AppendLine("DB_OPTIONS_SOCKET_TIMEOUT_MS=45000 # Close sockets after x milliseconds of inactivity");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MSSQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_AUTH_TYPE=default");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_INSTANCE_NAME=MSSQLSERVER");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_DB_PORT=1433");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_TRUST_SERVER_CERTIFICATE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_ROW_COLLECTION_ON_DONE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_USE_COLUMN_NAMES=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - POSTGRESQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_POSTGRES_DB_PROTOCOL=postgres");
            sb.AppendLine("DB_POSTGRES_DB_PORT=5432");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_SYNCHRONIZE=true");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_ACQUIRE=120000");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_IDLE=120000");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MONGODB Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MONGO_DB_PROTOCOL=mongodb");
            sb.AppendLine("DB_MONGO_DB_PORT=27017");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_AUTO_INDEX=false # Don't build indexes");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_KEEP_ALIVE=true # Keep the connection alive");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_NEW_URL_PARSER=true # Allow users to fall back to the old parser if they find a bug in the new parser");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_SERVER_SELECTION_TIMEOUT_MS=5000 # Keep trying to send operations for 5 seconds");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_FAMILY=4 # Use IPv4, skip trying IPv6");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_UNIFIED_TOPOLOGY=true # Remove support for several connection options that are no longer relevant with the new topology engine");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_FIND_AND_MODIFY=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Authentication Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("AUTH_LOGIN_RETRY_LIMIT=5");
            sb.AppendLine("AUTH_USE_CHECK_IF_USER_LOGGED_IN=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## JWT Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("JWT_SECRET='RmFybWVycyAzNjDCsCBMaW5rIChGTDM2MCkgLyBFVEcgLyBNaXRzdWkgLyB4XD9Iay0yXyhRNyZaXzhhIA=='");
            sb.AppendLine("JWT_SALT_COUNT=22");
            sb.AppendLine("JWT_EXPIRES_IN=2d");
            sb.AppendLine("JWT_IGNORE_EXPIRATION=true");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## API Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("API_PROTOCOL=http");
            sb.AppendLine("API_HOST=localhost");
            sb.AppendLine($"API_PORT={apiPort}");
            sb.AppendLine($"API_BASE_URL=api");
            sb.AppendLine($"API_RELATIVE_PATH={applicationName.Replace(replaceString!, string.Empty)}");
            sb.AppendLine("API_HEADERS_TIMEOUT_MS=120000");
            sb.AppendLine("API_KEEP_ALIVE_TIMEOUT_MS=120000");
            sb.AppendLine("API_TIMEOUT_MS=120000");
            sb.AppendLine("API_BODY_PARSER_LIMIT=100000000");
            sb.AppendLine("API_BODY_PARSER_PARAMETER_LIMIT=100000");
            sb.AppendLine("API_BODY_PARSER_EXTENDED=true");
            new FileIO(path).Replace(sb.ToString());
            return this;
        }
        public TemplateEnvironmentConfig GenerateIntegrationConfig(string path, string applicationName, string companyName, string apiPort, string? replaceString)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Environment Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine($"APP_COMPANY_NAME='{companyName}'");
            sb.AppendLine($"APP_NAME='{applicationName}'");
            sb.AppendLine("APP_COUNTRY_CODE=ZMB");
            sb.AppendLine("APP_ENV=SIT");
            sb.AppendLine("NODE_ENV=SIT");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_CONTEXT=POSTGRES");
            sb.AppendLine("DB_HOST=localhost");
            sb.AppendLine("DB_AUTH_UID=fl360.admin");
            sb.AppendLine("DB_AUTH_PWD='Hz7#h.W&`PJVjT/P'");
            sb.AppendLine("DB_NAME=fl360.db");
            sb.AppendLine("DB_SCHEMA_NAME=zmb");
            sb.AppendLine("DB_OPTIONS_USE_SSL=false");
            sb.AppendLine("DB_OPTIONS_ENCRYPT=true");
            sb.AppendLine("DB_OPTIONS_POOL_MAX_SIZE=20 # The maximum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_MIN_SIZE=0 # The minimum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_IDLE_MS=1000 # Maximum idle time for the connection pool");
            sb.AppendLine("DB_OPTIONS_CONNECTION_RETRY_INTERVAL_MS=1000 # Re(Connection) retry attempt interval in milliseconds");
            sb.AppendLine("DB_OPTIONS_CONNECTION_TIMEOUT_MS=120000# Close (timeout) connection after x milliseconds");
            sb.AppendLine("DB_OPTIONS_CANCEL_TIMEOUT_MS=1000 # Cancel connection timeout after x milliseconds");
            sb.AppendLine("DB_OPTIONS_SOCKET_TIMEOUT_MS=45000 # Close sockets after x milliseconds of inactivity");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MSSQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_AUTH_TYPE=default");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_INSTANCE_NAME=MSSQLSERVER");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_DB_PORT=1433");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_TRUST_SERVER_CERTIFICATE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_ROW_COLLECTION_ON_DONE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_USE_COLUMN_NAMES=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - POSTGRESQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_POSTGRES_DB_PROTOCOL=postgres");
            sb.AppendLine("DB_POSTGRES_DB_PORT=5432");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_SYNCHRONIZE=true");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_ACQUIRE=120000");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_IDLE=120000");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MONGODB Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MONGO_DB_PROTOCOL=mongodb");
            sb.AppendLine("DB_MONGO_DB_PORT=27017");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_AUTO_INDEX=false # Don't build indexes");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_KEEP_ALIVE=true # Keep the connection alive");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_NEW_URL_PARSER=true # Allow users to fall back to the old parser if they find a bug in the new parser");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_SERVER_SELECTION_TIMEOUT_MS=5000 # Keep trying to send operations for 5 seconds");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_FAMILY=4 # Use IPv4, skip trying IPv6");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_UNIFIED_TOPOLOGY=true # Remove support for several connection options that are no longer relevant with the new topology engine");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_FIND_AND_MODIFY=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Authentication Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("AUTH_LOGIN_RETRY_LIMIT=5");
            sb.AppendLine("AUTH_USE_CHECK_IF_USER_LOGGED_IN=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## JWT Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("JWT_SECRET='RmFybWVycyAzNjDCsCBMaW5rIChGTDM2MCkgLyBFVEcgLyBNaXRzdWkgLyB4XD9Iay0yXyhRNyZaXzhhIA=='");
            sb.AppendLine("JWT_SALT_COUNT=22");
            sb.AppendLine("JWT_EXPIRES_IN=2d");
            sb.AppendLine("JWT_IGNORE_EXPIRATION=true");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## API Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("API_PROTOCOL=http");
            sb.AppendLine("API_HOST=localhost");
            sb.AppendLine($"API_PORT={apiPort}");
            sb.AppendLine($"API_BASE_URL=api");
            sb.AppendLine($"API_RELATIVE_PATH={applicationName.Replace(replaceString!, string.Empty)}");
            sb.AppendLine("API_HEADERS_TIMEOUT_MS=120000");
            sb.AppendLine("API_KEEP_ALIVE_TIMEOUT_MS=120000");
            sb.AppendLine("API_TIMEOUT_MS=120000");
            sb.AppendLine("API_BODY_PARSER_LIMIT=100000000");
            sb.AppendLine("API_BODY_PARSER_PARAMETER_LIMIT=100000");
            sb.AppendLine("API_BODY_PARSER_EXTENDED=true");
            new FileIO(path).Replace(sb.ToString());
            return this;
        }
        public TemplateEnvironmentConfig GenerateUatConfig(string path, string applicationName, string companyName, string apiPort, string? replaceString)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Environment Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine($"APP_COMPANY_NAME='{companyName}'");
            sb.AppendLine($"APP_NAME='{applicationName}'");
            sb.AppendLine("APP_COUNTRY_CODE=ZMB");
            sb.AppendLine("APP_ENV=UAT");
            sb.AppendLine("NODE_ENV=UAT");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_CONTEXT=POSTGRES");
            sb.AppendLine("DB_HOST=localhost");
            sb.AppendLine("DB_AUTH_UID=fl360.admin");
            sb.AppendLine("DB_AUTH_PWD='Hz7#h.W&`PJVjT/P'");
            sb.AppendLine("DB_NAME=fl360.db");
            sb.AppendLine("DB_SCHEMA_NAME=zmb");
            sb.AppendLine("DB_OPTIONS_USE_SSL=false");
            sb.AppendLine("DB_OPTIONS_ENCRYPT=true");
            sb.AppendLine("DB_OPTIONS_POOL_MAX_SIZE=20 # The maximum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_MIN_SIZE=0 # The minimum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_IDLE_MS=1000 # Maximum idle time for the connection pool");
            sb.AppendLine("DB_OPTIONS_CONNECTION_RETRY_INTERVAL_MS=1000 # Re(Connection) retry attempt interval in milliseconds");
            sb.AppendLine("DB_OPTIONS_CONNECTION_TIMEOUT_MS=120000# Close (timeout) connection after x milliseconds");
            sb.AppendLine("DB_OPTIONS_CANCEL_TIMEOUT_MS=1000 # Cancel connection timeout after x milliseconds");
            sb.AppendLine("DB_OPTIONS_SOCKET_TIMEOUT_MS=45000 # Close sockets after x milliseconds of inactivity");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MSSQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_AUTH_TYPE=default");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_INSTANCE_NAME=MSSQLSERVER");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_DB_PORT=1433");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_TRUST_SERVER_CERTIFICATE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_ROW_COLLECTION_ON_DONE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_USE_COLUMN_NAMES=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - POSTGRESQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_POSTGRES_DB_PROTOCOL=postgres");
            sb.AppendLine("DB_POSTGRES_DB_PORT=5432");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_SYNCHRONIZE=true");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_ACQUIRE=120000");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_IDLE=120000");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MONGODB Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MONGO_DB_PROTOCOL=mongodb");
            sb.AppendLine("DB_MONGO_DB_PORT=27017");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_AUTO_INDEX=false # Don't build indexes");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_KEEP_ALIVE=true # Keep the connection alive");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_NEW_URL_PARSER=true # Allow users to fall back to the old parser if they find a bug in the new parser");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_SERVER_SELECTION_TIMEOUT_MS=5000 # Keep trying to send operations for 5 seconds");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_FAMILY=4 # Use IPv4, skip trying IPv6");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_UNIFIED_TOPOLOGY=true # Remove support for several connection options that are no longer relevant with the new topology engine");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_FIND_AND_MODIFY=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Authentication Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("AUTH_LOGIN_RETRY_LIMIT=5");
            sb.AppendLine("AUTH_USE_CHECK_IF_USER_LOGGED_IN=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## JWT Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("JWT_SECRET='RmFybWVycyAzNjDCsCBMaW5rIChGTDM2MCkgLyBFVEcgLyBNaXRzdWkgLyB4XD9Iay0yXyhRNyZaXzhhIA=='");
            sb.AppendLine("JWT_SALT_COUNT=22");
            sb.AppendLine("JWT_EXPIRES_IN=2d");
            sb.AppendLine("JWT_IGNORE_EXPIRATION=true");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## API Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("API_PROTOCOL=http");
            sb.AppendLine("API_HOST=localhost");
            sb.AppendLine($"API_PORT={apiPort}");
            sb.AppendLine($"API_BASE_URL=api");
            sb.AppendLine($"API_RELATIVE_PATH={applicationName.Replace(replaceString!, string.Empty)}");
            sb.AppendLine("API_HEADERS_TIMEOUT_MS=120000");
            sb.AppendLine("API_KEEP_ALIVE_TIMEOUT_MS=120000");
            sb.AppendLine("API_TIMEOUT_MS=120000");
            sb.AppendLine("API_BODY_PARSER_LIMIT=100000000");
            sb.AppendLine("API_BODY_PARSER_PARAMETER_LIMIT=100000");
            sb.AppendLine("API_BODY_PARSER_EXTENDED=true");
            new FileIO(path).Replace(sb.ToString());
            return this;
        }
        public TemplateEnvironmentConfig GenerateProductionConfig(string path, string applicationName, string companyName, string apiPort, string? replaceString)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Environment Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine($"APP_COMPANY_NAME='{companyName}'");
            sb.AppendLine($"APP_NAME='{applicationName}'");
            sb.AppendLine("APP_COUNTRY_CODE=ZMB");
            sb.AppendLine("APP_ENV=PROD");
            sb.AppendLine("NODE_ENV=PROD");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_CONTEXT=POSTGRES");
            sb.AppendLine("DB_HOST=localhost");
            sb.AppendLine("DB_AUTH_UID=fl360.admin");
            sb.AppendLine("DB_AUTH_PWD='Hz7#h.W&`PJVjT/P'");
            sb.AppendLine("DB_NAME=fl360.db");
            sb.AppendLine("DB_SCHEMA_NAME=zmb");
            sb.AppendLine("DB_OPTIONS_USE_SSL=false");
            sb.AppendLine("DB_OPTIONS_ENCRYPT=true");
            sb.AppendLine("DB_OPTIONS_POOL_MAX_SIZE=20 # The maximum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_MIN_SIZE=0 # The minimum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_IDLE_MS=1000 # Maximum idle time for the connection pool");
            sb.AppendLine("DB_OPTIONS_CONNECTION_RETRY_INTERVAL_MS=1000 # Re(Connection) retry attempt interval in milliseconds");
            sb.AppendLine("DB_OPTIONS_CONNECTION_TIMEOUT_MS=120000# Close (timeout) connection after x milliseconds");
            sb.AppendLine("DB_OPTIONS_CANCEL_TIMEOUT_MS=1000 # Cancel connection timeout after x milliseconds");
            sb.AppendLine("DB_OPTIONS_SOCKET_TIMEOUT_MS=45000 # Close sockets after x milliseconds of inactivity");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MSSQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_AUTH_TYPE=default");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_INSTANCE_NAME=MSSQLSERVER");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_DB_PORT=1433");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_TRUST_SERVER_CERTIFICATE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_ROW_COLLECTION_ON_DONE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_USE_COLUMN_NAMES=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - POSTGRESQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_POSTGRES_DB_PROTOCOL=postgres");
            sb.AppendLine("DB_POSTGRES_DB_PORT=5432");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_SYNCHRONIZE=true");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_ACQUIRE=120000");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_IDLE=120000");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MONGODB Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MONGO_DB_PROTOCOL=mongodb");
            sb.AppendLine("DB_MONGO_DB_PORT=27017");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_AUTO_INDEX=false # Don't build indexes");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_KEEP_ALIVE=true # Keep the connection alive");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_NEW_URL_PARSER=true # Allow users to fall back to the old parser if they find a bug in the new parser");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_SERVER_SELECTION_TIMEOUT_MS=5000 # Keep trying to send operations for 5 seconds");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_FAMILY=4 # Use IPv4, skip trying IPv6");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_UNIFIED_TOPOLOGY=true # Remove support for several connection options that are no longer relevant with the new topology engine");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_FIND_AND_MODIFY=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Authentication Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("AUTH_LOGIN_RETRY_LIMIT=5");
            sb.AppendLine("AUTH_USE_CHECK_IF_USER_LOGGED_IN=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## JWT Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("JWT_SECRET='RmFybWVycyAzNjDCsCBMaW5rIChGTDM2MCkgLyBFVEcgLyBNaXRzdWkgLyB4XD9Iay0yXyhRNyZaXzhhIA=='");
            sb.AppendLine("JWT_SALT_COUNT=22");
            sb.AppendLine("JWT_EXPIRES_IN=2d");
            sb.AppendLine("JWT_IGNORE_EXPIRATION=true");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## API Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("API_PROTOCOL=http");
            sb.AppendLine("API_HOST=localhost");
            sb.AppendLine($"API_PORT={apiPort}");
            sb.AppendLine($"API_BASE_URL=api");
            sb.AppendLine($"API_RELATIVE_PATH={applicationName.Replace(replaceString!, string.Empty)}");
            sb.AppendLine("API_HEADERS_TIMEOUT_MS=120000");
            sb.AppendLine("API_KEEP_ALIVE_TIMEOUT_MS=120000");
            sb.AppendLine("API_TIMEOUT_MS=120000");
            sb.AppendLine("API_BODY_PARSER_LIMIT=100000000");
            sb.AppendLine("API_BODY_PARSER_PARAMETER_LIMIT=100000");
            sb.AppendLine("API_BODY_PARSER_EXTENDED=true");
            new FileIO(path).Replace(sb.ToString());
            return this;
        }
        public TemplateEnvironmentConfig GenerateDisasterRecoveryConfig(string path, string applicationName, string companyName, string apiPort, string? replaceString)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Environment Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine($"APP_COMPANY_NAME='{companyName}'");
            sb.AppendLine($"APP_NAME='{applicationName}'");
            sb.AppendLine("APP_COUNTRY_CODE=ZMB");
            sb.AppendLine("APP_ENV=DR");
            sb.AppendLine("NODE_ENV=DR");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_CONTEXT=POSTGRES");
            sb.AppendLine("DB_HOST=localhost");
            sb.AppendLine("DB_AUTH_UID=fl360.admin");
            sb.AppendLine("DB_AUTH_PWD='Hz7#h.W&`PJVjT/P'");
            sb.AppendLine("DB_NAME=fl360.db");
            sb.AppendLine("DB_SCHEMA_NAME=zmb");
            sb.AppendLine("DB_OPTIONS_USE_SSL=false");
            sb.AppendLine("DB_OPTIONS_ENCRYPT=true");
            sb.AppendLine("DB_OPTIONS_POOL_MAX_SIZE=20 # The maximum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_MIN_SIZE=0 # The minimum number of connections to be maintained");
            sb.AppendLine("DB_OPTIONS_POOL_IDLE_MS=1000 # Maximum idle time for the connection pool");
            sb.AppendLine("DB_OPTIONS_CONNECTION_RETRY_INTERVAL_MS=1000 # Re(Connection) retry attempt interval in milliseconds");
            sb.AppendLine("DB_OPTIONS_CONNECTION_TIMEOUT_MS=120000# Close (timeout) connection after x milliseconds");
            sb.AppendLine("DB_OPTIONS_CANCEL_TIMEOUT_MS=1000 # Cancel connection timeout after x milliseconds");
            sb.AppendLine("DB_OPTIONS_SOCKET_TIMEOUT_MS=45000 # Close sockets after x milliseconds of inactivity");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MSSQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_AUTH_TYPE=default");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_INSTANCE_NAME=MSSQLSERVER");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_DB_PORT=1433");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_TRUST_SERVER_CERTIFICATE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_ROW_COLLECTION_ON_DONE=true");
            sb.AppendLine("DB_MSSQL_DB_OPTIONS_USE_COLUMN_NAMES=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - POSTGRESQL Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_POSTGRES_DB_PROTOCOL=postgres");
            sb.AppendLine("DB_POSTGRES_DB_PORT=5432");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_SYNCHRONIZE=true");
            sb.AppendLine("DB_POSTGRES_DB_OPTIONS_POOL_ACQUIRE=120000");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Database Configuration - MONGODB Options");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("DB_MONGO_DB_PROTOCOL=mongodb");
            sb.AppendLine("DB_MONGO_DB_PORT=27017");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_AUTO_INDEX=false # Don't build indexes");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_KEEP_ALIVE=true # Keep the connection alive");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_NEW_URL_PARSER=true # Allow users to fall back to the old parser if they find a bug in the new parser");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_SERVER_SELECTION_TIMEOUT_MS=5000 # Keep trying to send operations for 5 seconds");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_FAMILY=4 # Use IPv4, skip trying IPv6");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_UNIFIED_TOPOLOGY=true # Remove support for several connection options that are no longer relevant with the new topology engine");
            sb.AppendLine("DB_MONGO_DB_OPTIONS_USE_FIND_AND_MODIFY=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## Authentication Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("AUTH_LOGIN_RETRY_LIMIT=5");
            sb.AppendLine("AUTH_USE_CHECK_IF_USER_LOGGED_IN=false");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## JWT Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("JWT_SECRET='RmFybWVycyAzNjDCsCBMaW5rIChGTDM2MCkgLyBFVEcgLyBNaXRzdWkgLyB4XD9Iay0yXyhRNyZaXzhhIA=='");
            sb.AppendLine("JWT_SALT_COUNT=22");
            sb.AppendLine("JWT_EXPIRES_IN=2d");
            sb.AppendLine("JWT_IGNORE_EXPIRATION=true");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("## API Configuration");
            sb.AppendLine("## =========================================================");
            sb.AppendLine("API_PROTOCOL=http");
            sb.AppendLine("API_HOST=localhost");
            sb.AppendLine($"API_PORT={apiPort}");
            sb.AppendLine($"API_BASE_URL=api");
            sb.AppendLine($"API_RELATIVE_PATH={applicationName.Replace(replaceString!, string.Empty)}");
            sb.AppendLine("API_HEADERS_TIMEOUT_MS=120000");
            sb.AppendLine("API_KEEP_ALIVE_TIMEOUT_MS=120000");
            sb.AppendLine("API_TIMEOUT_MS=120000");
            sb.AppendLine("API_BODY_PARSER_LIMIT=100000000");
            sb.AppendLine("API_BODY_PARSER_PARAMETER_LIMIT=100000");
            sb.AppendLine("API_BODY_PARSER_EXTENDED=true");
            new FileIO(path).Replace(sb.ToString());
            return this;
        }
    }
}
